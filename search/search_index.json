{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Preview and build your markdown files quickly in your web browser. You can use the builtin Python Markdown parser (offline) or use the GitHub Markdown API (online) or GitLab Markdown API (online) for the conversion. Note If you choose the GitHub or GitLab API for conversion (set parser to github or gitlab in your settings), your code will be sent through HTTPS to GitHub or GitLab for live conversion. In case of GitHub, You'll have GitHub Flavored Markdown , syntax highlighting and EMOJI support for free . If you make more than 60 calls a day, be sure to set your GitHub API key in the settings . Features Markdown preview using the python-markdown with syntax highlighting via Pygments and optional 3 rd party extensions ( pymdown-extensions included by default). Markdown previews via the GitHub API. Markdown previews via the GitLab API. Ability use other external Markdown parsers. Build markdown file using Sublime Text build system. Browser preview auto reload on save if you have the LiveReload plugin installed. Configurable CSS and JavaScript assets with overriding if needed. YAML support thanks to @tommi . Clipboard selection and copy to clipboard thanks to @hexatrope . MathJax support : \\frac{\\pi}{2} \\frac{\\pi}{2} thanks to @bps10 . HTML template customization thanks to @hozaka . Embed images as base64. Strip out MultiMarkdown CriticMarkup. Support Any bugs about Markdown Preview please feel free to report here . And you are welcome to fork and submit pull requests. Attribution Markdown Preview contains a stripped down version of font awesome that is included in the default non-GitHub CSS. It contains only the icons we currently use. https://fontawesome.com/license License The code is available at GitHub under the MIT license . MathJax.Hub.Config({ config: [\"MMLorHTML.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\", \"output/NativeMML\"], extensions: [\"MathMenu.js\", \"MathZoom.js\"], TeX: { TagSide: \"right\", TagIndent: \".8em\", MultLineWidth: \"85%\", equationNumbers: { autoNumber: \"AMS\", } }, displayAlign: 'left', showProcessingMessages: false, messageStyle: 'none' });","title":"Markdown Preview"},{"location":"#overview","text":"Preview and build your markdown files quickly in your web browser. You can use the builtin Python Markdown parser (offline) or use the GitHub Markdown API (online) or GitLab Markdown API (online) for the conversion. Note If you choose the GitHub or GitLab API for conversion (set parser to github or gitlab in your settings), your code will be sent through HTTPS to GitHub or GitLab for live conversion. In case of GitHub, You'll have GitHub Flavored Markdown , syntax highlighting and EMOJI support for free . If you make more than 60 calls a day, be sure to set your GitHub API key in the settings .","title":"Overview"},{"location":"#features","text":"Markdown preview using the python-markdown with syntax highlighting via Pygments and optional 3 rd party extensions ( pymdown-extensions included by default). Markdown previews via the GitHub API. Markdown previews via the GitLab API. Ability use other external Markdown parsers. Build markdown file using Sublime Text build system. Browser preview auto reload on save if you have the LiveReload plugin installed. Configurable CSS and JavaScript assets with overriding if needed. YAML support thanks to @tommi . Clipboard selection and copy to clipboard thanks to @hexatrope . MathJax support : \\frac{\\pi}{2} \\frac{\\pi}{2} thanks to @bps10 . HTML template customization thanks to @hozaka . Embed images as base64. Strip out MultiMarkdown CriticMarkup.","title":"Features"},{"location":"#support","text":"Any bugs about Markdown Preview please feel free to report here . And you are welcome to fork and submit pull requests.","title":"Support"},{"location":"#attribution","text":"Markdown Preview contains a stripped down version of font awesome that is included in the default non-GitHub CSS. It contains only the icons we currently use. https://fontawesome.com/license","title":"Attribution"},{"location":"#license","text":"The code is available at GitHub under the MIT license . MathJax.Hub.Config({ config: [\"MMLorHTML.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\", \"output/NativeMML\"], extensions: [\"MathMenu.js\", \"MathZoom.js\"], TeX: { TagSide: \"right\", TagIndent: \".8em\", MultLineWidth: \"85%\", equationNumbers: { autoNumber: \"AMS\", } }, displayAlign: 'left', showProcessingMessages: false, messageStyle: 'none' });","title":"License"},{"location":"extras/","text":"Extras MathJax Support Danger GitHub and GitLab is not supported with MathJax. You will have to come up with a MathJax config that works for it and escape problematic syntax that GitHub may try to convert. To render Tex style math in Markdown, you can use the default MathJax configuration that is included with Markdown Preview or create and reference your own. When using Python Markdown (the markdown parser), it is recommended to use something like the extension pymdownx.arithmatex as it ensures that math notation is preserved in the Markdown conversion process. In this example, we will try to show a generalized approach that should work when using Python Markdown with Arithmatex. Arithmatex will be configured in a generalized way that could potentially be used with libraries like MathJax or KaTeX (see KaTeX Support to use KaTeX instead). It is left to the user to figure out a configuration that works for other potential, alternate libraries. There are other non-generalized approaches we could use, but as previously stated, in this example, the output will be a non MathJax specific output via Arithmatex's \"generic\" mode. Markdown Preview provides a script in MarkdownPreview/js/math_config.js that uses MathJax's tex2jax plain text scanning. It searches for $ ... $ , $$ ... $$ , \\( ... \\) , \\[ ... \\] , and \\begin { env } ... \\end { env } . To load MathJax support, simply include the MathJax library along with the math config file provided by this extension. You are free to provide your own and reference it instead if you'd like to tweak the configuration: \"js\" : { \"markdown\" : [ \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js\" , \"res://MarkdownPreview/js/math_config.js\" ] } If you are using pymdownx.arithmatex you can configure it like so to take advantage of the generalized configuration. You are also free to customize Arithmatex to your liking, though you may have to modify your MathJax config to accommodate certain changes. Check out Arithmatex documentation for more info. \"markdown_extensions\" : [ { \"pymdownx.arithmatex\" : { \"generic\" : true , }, } ] KaTeX Support Warning GitLab is already configured for KaTeX by default. You should just include default in your CSS and JS list. Danger GitHub is not supported with KaTeX. You will have to come up with a MathJax config that works for it and escape problematic syntax that GitHub may try to convert. To render Tex style math in Markdown, you can use the default KaTeX configuration that is included with Markdown Preview or create and reference your own. When using Python Markdown (the markdown parser), it is recommended to use something like the extension pymdownx.arithmatex as it ensures that math notation is preserved in the Markdown conversion process. In this example, we will try to show a generalized approach that should work when using Python Markdown with Arithmatex. Arithmatex will be configured in a generalized way that could potentially be used with libraries like MathJax or KaTeX (see MathJax Support to use MathJax instead). It is left to the user to figure out a configuration that works for other potential, alternate libraries. There are other non-generalized approaches we could use, but as previously stated, in this example, the output will be a non MathJax specific output via Arithmatex's \"generic\" mode. Markdown Preview provides a script in MarkdownPreview/js/katex_config.js that uses KaTeX's API to scan for arithmatex classes, and converts and renders the math. It searches for $ ... $ , $$ ... $$ , \\( ... \\) , \\[ ... \\] , and \\begin { env } ... \\end { env } . To load KaTeX support, simply include the KaTeX library along with the KaTeX configuration script provided by this extension. You are free to provide your own and reference it instead if you'd like to tweak the configuration: \"js\" : { \"markdown\" : [ \"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.js\" , \"res://MarkdownPreview/js/katex_config.js\" ] }, You also must provide the KaTeX CSS file. Optionally, if you'd like equation numbers, a simple CSS solution is provided, though it will left align your math. Feel free to create your own. \"css\" : { \"markdown\" : [ \"default\" , // <- The default Markdown CSS. \"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css\" , // <- KaTeX CSS \"res://MarkdownPreview/css/katex_eqnum.css\" // <- Optional equation numbering CSS ] }, If you are using pymdownx.arithmatex you can configure it like so to take advantage of the generalized configuration. You are also free to customize Arithmatex to your liking, though you may have to modify your KaTeX config to accommodate certain changes. Check out Arithmatex documentation for more info. \"markdown_extensions\" : [ { \"pymdownx.arithmatex\" : { \"generic\" : true , }, } ] UML Support Danger GitHub is not supported with UML. If you are using the extension SuperFences extension , it has an option to create special, custom fences. By default, it specifies flow and sequence languages to generate special code blocks that JavaScript can be applied to later to create UML diagrams: see documentation for more info. Assuming you are using SuperFences, you can include the following libraries to transform sequence and flow blocks using js-sequence-diagrams and flowchart.js respectively. \"js\" : [ // Required libraries to transform UML notation \"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\" , \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\" , \"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\" , \"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\" , // This library applies the above libraries to the fenced code blocks `flow` and `sequence`. \"res://MarkdownPreview/js/uml.js\" ] Please see the MarkdownPreview.sublime-settings file to see how custom fences are configured in case you need to configure them manually. Check out our example file if using YAML frontmatter to define custom fences. Mermaid UML Support Mermaid is an alternate approach for rendering UML in a browser. Like the aforementioned UML Support , it also uses SuperFences extension to create special, custom fences. Then we can just add the needed libraries, are custom loader, and configuration file. If you would like to tweak the configuration file, you can create your own and load it instead. ```js \"js\": [ // Mermaid library \" https://unpkg.com/mermaid@8.8.4/dist/mermaid.min.js \", // User configuration, should be loaded before the loader \"res://MarkdownPreview/js/mermaid_config.js\", // Mermaid loader \"res://MarkdownPreview/js/mermaid.js\" ] ```` Please see the MarkdownPreview.sublime-settings file to see how custom fences are configured in case you need to configure them manually. Check out our example file if using YAML frontmatter to define custom fences.","title":"Extras"},{"location":"extras/#extras","text":"","title":"Extras"},{"location":"extras/#mathjax-support","text":"Danger GitHub and GitLab is not supported with MathJax. You will have to come up with a MathJax config that works for it and escape problematic syntax that GitHub may try to convert. To render Tex style math in Markdown, you can use the default MathJax configuration that is included with Markdown Preview or create and reference your own. When using Python Markdown (the markdown parser), it is recommended to use something like the extension pymdownx.arithmatex as it ensures that math notation is preserved in the Markdown conversion process. In this example, we will try to show a generalized approach that should work when using Python Markdown with Arithmatex. Arithmatex will be configured in a generalized way that could potentially be used with libraries like MathJax or KaTeX (see KaTeX Support to use KaTeX instead). It is left to the user to figure out a configuration that works for other potential, alternate libraries. There are other non-generalized approaches we could use, but as previously stated, in this example, the output will be a non MathJax specific output via Arithmatex's \"generic\" mode. Markdown Preview provides a script in MarkdownPreview/js/math_config.js that uses MathJax's tex2jax plain text scanning. It searches for $ ... $ , $$ ... $$ , \\( ... \\) , \\[ ... \\] , and \\begin { env } ... \\end { env } . To load MathJax support, simply include the MathJax library along with the math config file provided by this extension. You are free to provide your own and reference it instead if you'd like to tweak the configuration: \"js\" : { \"markdown\" : [ \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js\" , \"res://MarkdownPreview/js/math_config.js\" ] } If you are using pymdownx.arithmatex you can configure it like so to take advantage of the generalized configuration. You are also free to customize Arithmatex to your liking, though you may have to modify your MathJax config to accommodate certain changes. Check out Arithmatex documentation for more info. \"markdown_extensions\" : [ { \"pymdownx.arithmatex\" : { \"generic\" : true , }, } ]","title":"MathJax Support"},{"location":"extras/#katex-support","text":"Warning GitLab is already configured for KaTeX by default. You should just include default in your CSS and JS list. Danger GitHub is not supported with KaTeX. You will have to come up with a MathJax config that works for it and escape problematic syntax that GitHub may try to convert. To render Tex style math in Markdown, you can use the default KaTeX configuration that is included with Markdown Preview or create and reference your own. When using Python Markdown (the markdown parser), it is recommended to use something like the extension pymdownx.arithmatex as it ensures that math notation is preserved in the Markdown conversion process. In this example, we will try to show a generalized approach that should work when using Python Markdown with Arithmatex. Arithmatex will be configured in a generalized way that could potentially be used with libraries like MathJax or KaTeX (see MathJax Support to use MathJax instead). It is left to the user to figure out a configuration that works for other potential, alternate libraries. There are other non-generalized approaches we could use, but as previously stated, in this example, the output will be a non MathJax specific output via Arithmatex's \"generic\" mode. Markdown Preview provides a script in MarkdownPreview/js/katex_config.js that uses KaTeX's API to scan for arithmatex classes, and converts and renders the math. It searches for $ ... $ , $$ ... $$ , \\( ... \\) , \\[ ... \\] , and \\begin { env } ... \\end { env } . To load KaTeX support, simply include the KaTeX library along with the KaTeX configuration script provided by this extension. You are free to provide your own and reference it instead if you'd like to tweak the configuration: \"js\" : { \"markdown\" : [ \"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.js\" , \"res://MarkdownPreview/js/katex_config.js\" ] }, You also must provide the KaTeX CSS file. Optionally, if you'd like equation numbers, a simple CSS solution is provided, though it will left align your math. Feel free to create your own. \"css\" : { \"markdown\" : [ \"default\" , // <- The default Markdown CSS. \"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css\" , // <- KaTeX CSS \"res://MarkdownPreview/css/katex_eqnum.css\" // <- Optional equation numbering CSS ] }, If you are using pymdownx.arithmatex you can configure it like so to take advantage of the generalized configuration. You are also free to customize Arithmatex to your liking, though you may have to modify your KaTeX config to accommodate certain changes. Check out Arithmatex documentation for more info. \"markdown_extensions\" : [ { \"pymdownx.arithmatex\" : { \"generic\" : true , }, } ]","title":"KaTeX Support"},{"location":"extras/#uml-support","text":"Danger GitHub is not supported with UML. If you are using the extension SuperFences extension , it has an option to create special, custom fences. By default, it specifies flow and sequence languages to generate special code blocks that JavaScript can be applied to later to create UML diagrams: see documentation for more info. Assuming you are using SuperFences, you can include the following libraries to transform sequence and flow blocks using js-sequence-diagrams and flowchart.js respectively. \"js\" : [ // Required libraries to transform UML notation \"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\" , \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\" , \"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\" , \"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\" , // This library applies the above libraries to the fenced code blocks `flow` and `sequence`. \"res://MarkdownPreview/js/uml.js\" ] Please see the MarkdownPreview.sublime-settings file to see how custom fences are configured in case you need to configure them manually. Check out our example file if using YAML frontmatter to define custom fences.","title":"UML Support"},{"location":"extras/#mermaid-uml-support","text":"Mermaid is an alternate approach for rendering UML in a browser. Like the aforementioned UML Support , it also uses SuperFences extension to create special, custom fences. Then we can just add the needed libraries, are custom loader, and configuration file. If you would like to tweak the configuration file, you can create your own and load it instead. ```js \"js\": [ // Mermaid library \" https://unpkg.com/mermaid@8.8.4/dist/mermaid.min.js \", // User configuration, should be loaded before the loader \"res://MarkdownPreview/js/mermaid_config.js\", // Mermaid loader \"res://MarkdownPreview/js/mermaid.js\" ] ```` Please see the MarkdownPreview.sublime-settings file to see how custom fences are configured in case you need to configure them manually. Check out our example file if using YAML frontmatter to define custom fences.","title":"Mermaid UML Support"},{"location":"install/","text":"Installation Using Package Control ( Recommended ) We recommend installing via Package Control . Install Package Control if you haven't yet. Use the shortcut Cmd \uff0b Shift \uff0b P then select Package Control: Install Package . Look for and select MarkdownPreview .","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#using-package-control-recommended","text":"We recommend installing via Package Control . Install Package Control if you haven't yet. Use the shortcut Cmd \uff0b Shift \uff0b P then select Package Control: Install Package . Look for and select MarkdownPreview .","title":"Using Package Control (Recommended)"},{"location":"usage/","text":"Usage Info When referring to settings, we are referring to the settings found at Preferences -> Package Settings -> MarkdownPreview . Settings - User is where you change your settings for Markdown Preview. Settings - Default is a good reference with detailed descriptions for each setting. To preview Optionally select some of your markdown for conversion. Use the shortcut Cmd \uff0b Shift \uff0b P then select MarkdownPreview to show the follow commands (you will be prompted to select which parser you prefer): Markdown Preview: Preview in Browser Markdown Preview: Export HTML in Sublime Text Markdown Preview: Copy to Clipboard Markdown Preview: Open Markdown Cheat sheet Or bind some shortcut in your user key binding, go to Preferences --> Keybindings then add to the User map: For a specific parser and target: { \"keys\" : [ \"alt+m\" ], \"command\" : \"markdown_preview\" , \"args\" : { \"target\" : \"browser\" , \"parser\" : \"markdown\" } }, To bring up the quick panel to select enabled parsers for a given target: { \"keys\" : [ \"alt+m\" ], \"command\" : \"markdown_preview_select\" , \"args\" : { \"target\" : \"browser\" } }, If you want to control which browser the preview is opened in, you can edit the browser option in the settings file: /* Sets the default opener for HTML files default - Use the system default HTML viewer other - Set a full path to any executable. ex: /Applications/Google Chrome Canary.app or /Applications/Firefox.app */ \"browser\" : \"default\" , Custom Templates By default, Markdown Preview uses a simple template, but you can use your own custom template with the setting html_template . If you wish to not include the default stylesheets, just remove them from the css option. /* Specify a HTML template file to render your markdown within. Available place holders in HTML template: {{ HEAD }} - would be replaced by generated stylesheets, javascripts enabled above {{ BODY }} - would be replaced by HTML converted from markdown By setting \"skip_default_stylesheet\" to true you can use the styles only in your HTML template. In most cases you should turn this setting on to have a full-featured design. Refer to 'customized-template-sample.html' as a show case. */ \"html_template\" : \"/ABS_PATH_TO_A_HTML_FILE\" , LiveReload To get live updates while editing a file after preview, you need to do the following: Enable the enable_autoreload setting in MarkdownPreview.sublime-settings . /* Enable auto-reloaded on save. Will not work if GitHub parser or GitLab parser is used without oauth key specified. */ \"enable_autoreload\" : true , Install LiveReload package from Package Control. Restart. Open the command palette and select the command LiveReload: Enable/disable plug-ins . Select Simple Reload with delay (400ms) . It is possible you can get away with Simple Reload , but some experience an issue where they are one rev behind when using Simple Reload . Edit document and enjoy live reload. You don't need to enable Simple Reload on every file as it is done globally; it can be turned on or off as needed. From now on, files should auto-reload when you open them in the browser unless you disable Simple Reload . Preview Path Conversion In the generated previews, paths are converted so that images and other links work properly. By default, paths are converted to absolute paths, but you can use relative if desired as well. Image paths can also be changed to inject embedded base 64 images (only for local images). Path handling is controlled by the following two settings: /* Sets how image paths are handled. Setting is a string value: (absolute | relative | base64 | none) absolute: converts relative local paths to absolute relative: converts relative local paths to a path relative to the HTML output base64: coverts the local file to base64 and embeds it in the HTML none: does nothing */ \"image_path_conversion\" : \"absolute\" , /* Sets how file paths are handled. Setting is a string value: (absolute | relative | none) absolute: converts relative local paths to absolute relative: converts relative local paths to a path relative to the HTML output none: does nothing */ \"file_path_conversions\" : \"absolute\" , Preview Temp Location By default, previews are generated in the OSs default temp location, but you can specify your own custom temp location via the path_tempfile option: /* Sets a custom temporary folder for MarkdownPreview-generated HTML files. Useful if you're using LiveReload and don't want to use the OS default. The directory will be created if it doesn't exist. Relative paths are supported, and are checked against `os.path.isabs`, see doc: http://docs.python.org/3/library/os.path.html#os.path.isabs Examples: /tmp/custom_folder (Linux/OSX - absolute path) C:/TEMP/MYNOTES C:\\\\TEMP\\\\MYNOTES (Windows - absolute path, forward slash or escaped back slash) build (All OS - relative path, current dir) ../build (Linux/OSX - relative path, in parent dir) ..\\\\build (Windows - relative path, in parent dir) */ \"path_tempfile\" : \"/tmp/my_notes\" , Enabling Other External Markdown Parsers External parser commands and arguments should first be mapped to a name. Each binary value must be an array with the path to the binary being first, followed by flags and options as individual indexes in the array. \"markdown_binary_map\" : { \"multimarkdown\" : [ \"/usr/local/bin/multimarkdown\" , \"--some-option\" , \"some-value\" ] }, Then the name can be placed in enabled_parsers to enable use of the new parser. \"enabled_parsers\" : [ \"markdown\" , \"github\" , \"gitlab\" , \"multimarkdown\" ], Configuring Python Markdown Extensions Python Markdown comes with a number of extensions and can also use a number of 3 rd party extensions. To configure Markdown Preview with extensions, use the markdown_extensions setting. markdown_extensions is a setting that contains an array of extensions in the format of their import path. For instance, the Toc (Table of Contents) extension is found in the Markdown Package at markdown.extensions.toc . This is according to Python Markdown documentation . All extensions must be specified this way. \"markdown_extensions\" : [ \"markdown.extensions.toc\" ] To configure an extension, make the entry a dictionary. In this example, we want to turn on Toc's permalink feature: \"markdown_extensions\" : [ { \"markdown.extensions.toc\" : { \"permalink\" : true } } ] You can configure extension options with strings, booleans, integers, floats, etc. But sometimes, an extension can take a function. Functions are not part of the JSON spec. Luckily, support has been added with the following syntax: To specify a function, create an object whose key is named !!python/name , and whose value is the import path of the function. This syntax was picked to be similar to PyYaml's syntax which is used for the Markdown frontmatter. So let's pretend we didn't like Toc's default slugify markdown.extensions.headerid.slugify , and instead wanted to use PyMdown Extensions' slugify pymdownx.slugs.uslugify . We could specify the new slugify function with the following syntax: \"markdown_extensions\" : [ { \"markdown.extensions.toc\" : { \"slugify\" : { \"!!python/name\" : \"pymdownx.slugs.uslugify\" } } } ] Compare to the PyYaml format: markdown_extensions : - markdown.extensions.toc : slugify : !!python/name:pymdownx.slugs.uslugify To build Just use ctrl + B (Windows/Linux) or cmd + B (Mac) to build current file. You can configure the build action by using the build_action setting. /* By default, Markdown Preview builds the HTML in the source directory. It expects the file to exist on disk. It pops up the build output panel etc. If you wish to override this behavior, you can change \"build_action\" build - The default build behavior. browser - Preview the file in your browser. clipboard - Copy the HTML output to the clipboard. sublime - Export the HTML to a Sublime tab. save - Run the normal save command that outputs to the source directory. It will also prompt for \"save as\" if the file does not exit on disk. All the build options use the default parser defined above in \"parser\" */ \"build_action\" : \"build\" , And the parser that is used when building is set in the parser setting: /* Sets the parser used for building markdown to HTML. NOTE: The parser setting is not for the preview commands now. The previews have separate commands for each parser markdown. Warning for github API: if you have a ST2 linux build, Python is not built with SSL so it may not work default - The current default parser is python-markdown parser. markdown - Use the built-in python-markdown parser github - Use the github API to convert markdown, so you can use GitHub flavored Markdown, see https://help.github.com/articles/github-flavored-markdown/ gitlab - Use the gitlab API to convert markdown, so you can use GitLab flavored Markdown, see https://docs.gitlab.com/ee/user/markdown.html */ \"parser\" : \"markdown\" , When building, a panel will be opened showing build information. This can be disabled by setting show_panel_on_build to false : /* do we show the panel when building with CMD+B */ \"show_panel_on_build\" : true , Configuring Pygments If you add the pymdownx.highlight extension manually in the enabled extensions, you can override some of the default settings. Turn language guessing on or off ( on will highlight fenced blocks even if you don't specify a language): \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"guess_lang\" : true } ] Show line numbers: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"linenums\" : true } ] Change the highlight theme: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"pygments_style\" : \"emacs\" } ] Inline the CSS: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"noclasses\" : true } ] Use multiple: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"linenums\" : true , \"pygments_style\" : \"emacs\" } ] The pymdownx.highlight extension's pygments_style option is only useful if you are using noclasses which writes the styles directly to the HTML tags via the style attribute. Normally, we just inject CSS generated by Pygments which is the default behavior. Whether the CSS injection occurs, the Pygments' style that is used, and the CSS class that is used for code blocks can all be controlled with the following options: /* If Pygments is being used, you may want to inject one of the Pygment styles provided into the HTML. If so, enable this. */ \"pygments_inject_css\" : true , /* Name of the Pygments style to inject. Available styles are the styles provided by pygments plus \"github\" and \"github2014\". */ \"pygments_style\" : \"github\" , /* This is the class to prepend to the pygments CSS styles. Make sure it matches whatever class(es) you've specified in the extension that controls Pygments highlighting. CodeHilite's default is \"codehilite\", while Highlight's (the extension that SuperFences uses) is \"highlight\". */ \"pygments_css_class\" : \"highlight\" , See codehilite page for more info. See highlight page for more info. Meta Data Support When the meta extension is enabled ( https://python-markdown.github.io/extensions/meta_data ), the results will be written to the HTML head in the form <meta name=\"key\" content=\"value1,value2\"> . title is the one exception, and its content will be written to the title tag in the HTML head. YAML Frontmatter Support YAML frontmatter can be stripped out and read when strip_yaml_front_matter is set to true in the settings file. In general the, the frontmatter is handled the same as meta data , but if both exist in a file, the YAML keys will override the meta extension keys. There are a few special key names that won't be handled as HTML meta data. /* Strips the YAML front matter header and converts title to a heading */ \"strip_yaml_front_matter\" : false , Special YAML Key Names YAML frontmatter has a few special key names that are used that will not be handled as meta data: basepath : An absolute path to configure the relative paths for images etc. (for when the markdown is supposed to reference images in a different location.) references : Can take a file path or an array of file paths for separate markdown files containing references, footnotes, etc. Can be an absolute path or relative path. Relative paths first use the source file's directory, and if the file cannot be found, it will use the basepath setting. destination : This is an absolute file path or relative file path for when the markdown is saved to HTML via the build command or the Save to HTML command. Relative paths first use the source file's directory, and if the file cannot be found, it will use the basepath setting. settings : This is a dictionary where you can override settings that are in the settings file. --- # Builtin values references : - references.md - abbreviations.md - footnotes.md destination : destination.html # Meta Data title : Test Page author : - John Doe - Jane Doe # Settings overrides settings : markdown_extensions : - markdown.extensions.footnotes - markdown.extensions.attr_list - markdown.extensions.def_list - markdown.extensions.tables - markdown.extensions.abbr - markdown.extensions.toc - markdown.extensions.smarty - markdown.extensions.meta - markdown.extensions.wikilinks - markdown.extensions.admonition - markdown.extensions.md_in_html - pymdownx.highlight : pygments_style : github - pymdownx.progressbar - pymdownx.github - pymdownx.caret : superscript : false --- Parsing GitHub Flavored Markdown GitHub Flavored Markdown (GFM) is a very popular markdown. Markdown Preview can actually handle them in a couple of ways: online and offline. Online Parsing GFM using the online method requires using the GitHub API as the parser. It may also require setting github_mode to gfm to get things like tasklists to render properly. /* Default mode for the github Markdown parser : markdown (documents) or gfm (comments) see http://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document */ \"github_mode\" : \"markdown\" , Using the GitHub API without an oauth key is limited to so many calls. After the limit is reached, the GitHub API will deny further calls until after a set limit of time. To avoid this issue, you can set your API key in the settings as follows: /* Uses an OAuth token when parsing markdown with GitHub API. To create one for Markdown Preview, see https://help.github.com/articles/creating-an-oauth-token-for-command-line-use. Warn: this secret *must not be shared* with anyone and at least you should create it with minimal scopes for security reasons. */ \"github_oauth_token\" : \"secret\" , The GitHub API only inserts IDs for headers when github_mode is markdown , but it doesn't quite generate the way that GitHub does in your project's readmes on the site. This makes it so the GitHub CSS doesn't create the clickable anchors. So when github_mode is markdown , you can have Markdown Preview insert the ids properly so the CSS works with the following option: /* Enables a post process to inject header ids to ensure hrefs to headers work */ \"github_inject_header_ids\" : true , Offline By default almost all extensions in the default, not GitHub parser are enabled to help with a GitHub-ish feel. As mentioned earlier, a number of extensions are included by default. You can remove ones that are not part of GFM if you chose. GitHub uses CommonMark with some extras included on top. Python Markdown is not a CommonMark parser. It is certainly possible that someone could include a CommonMark parser externally call it . Parsing GitLab Flavored Markdown GitLab Flavored Markdown (GFM) is a popular markdown, too. Markdown Preview can handle them online. Online Parsing GFM using the online method requires using the GitLab API as the parser. It may also require setting gitlab_mode to gfm (default) to get things like tasklists to render properly. /* Default mode for the gitlab Markdown parser : markdown (documents) or gfm (comments) see https://docs.gitlab.com/ee/api/markdown.html#render-an-arbitrary-markdown-document */ \"gitlab_mode\" : \"markdown\" , You can set your personal token in the settings as follows: /* Uses a personal token when parsing markdown with GitLab API. To create one for Markdown Preview, see https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html. Warn: this secret *must not be shared* with anyone and at least you should create it with minimal scopes for security reasons. */ \"gitlab_personal_token\" : \"secret\" , Including CSS Markdown Preview includes a default CSS via the css setting. It uses the special keyword default to represent the default CSS. As seen below, CSS is configured per parser name (the same name used in enabled_parsers ). If a parser name cannot be found in the dictionary, [\"default\"] will be used. \"css\" : { \"markdown\" : [ \"default\" ], \"github\" : [ \"default\" ], \"gitlab\" : [ \"default\" ] }, You can include whatever CSS you want, and even remove the default if you like. It can take URLs or file paths. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of res://<package_name>/<subfolders>/file.css . Using the res:// format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped. Override CSS by File Type You can also override the default CSS with special file specific CSS. This CSS does not replace the default, but will append CSS for a supported file type after the conventional CSS. So assuming the following configuration: \"css\" : { \"markdown\" : [ \"default\" ], } // File must be of one type below \"markdown_filetypes\" : [ \".md\" , \".markdown\" , \".mdown\" ], We could enable the following: \"allow_css_overrides\" : true , Then if we have a file filename.md and a CSS in the same directory filename.css , that CSS will be applied to that file. Including HTML HEAD By default, the head is always included in the HTML output. This includes the CSS, JavaScript, etc. If for some reason you need to omit the HEAD, you can by modifying the include_head option. Just remove the target that you wish to omit the head in. The option build specifically refers to when build_action is set to build in the settings. /* do we include the CSS when outputting HTML? */ \"include_head\" : [ \"build\" , \"browser\" , \"sublime\" , \"clipboard\" , \"save\" ] GitLab Highlight Theme In case of using GitLab online compiler, you can set gitlab_highlight_theme to personalize syntax highlighting. Currently available options are \"white\" (default), \"dark\", \"solarized-dark\", \"solarized-light\", and, \"monokai\". Take a look at GitLab documentations here for more details. Including JavaScript Markdown Preview include default JS (if required for the given parser) via the js setting. It uses the special keyword default to represent the default JS. As seen below, JS is configured per parser name (the same name used in enabled_parsers ). If a parser name cannot be found in the dictionary, [\"default\"] will be used. \"js\" : { \"markdown\" : [ \"default\" ], \"github\" : [ \"default\" ], \"gitlab\" : [ \"default\" ] }, You can include whatever CSS you want, and even remove the default if you like. Each entry in the dictionary is a list and can take file paths or URLs. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of res://<package_name>/<subfolders>/file.js . Using the res:// format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped. CriticMarkup Python Markdown can strip/apply out CriticMarkup syntax if desired. Simply enable the following option: /* Sets how multimarkdown critic marks are handled. Setting is a string value: (accept | reject | none) accept: Accepts the proposed inserts and deletions (comments etc. are discarded) reject: Rejects the proposed inserts and deletions (comments etc. are discarded) none: does nothing Critic marks only affects \"github\" and \"markdown\" (Python Markdown). */ \"strip_critic_marks\" : \"none\" , Simple HTML Output Some people may desire a stripped down output on occasions that does not include HTML headers, inline styles, and IDs. Markdown Preview has a mode that will strip out these things and omit using a template. This mode can be enabled via the the html_simple option: /* Sets HTML output to a simple form: - No head - No body tags - ids, classes, and style are stripped out - Just bare minimum HTML tags and attributes - extension modifications included */ \"html_simple\" : false ,","title":"Usage"},{"location":"usage/#usage","text":"Info When referring to settings, we are referring to the settings found at Preferences -> Package Settings -> MarkdownPreview . Settings - User is where you change your settings for Markdown Preview. Settings - Default is a good reference with detailed descriptions for each setting.","title":"Usage"},{"location":"usage/#to-preview","text":"Optionally select some of your markdown for conversion. Use the shortcut Cmd \uff0b Shift \uff0b P then select MarkdownPreview to show the follow commands (you will be prompted to select which parser you prefer): Markdown Preview: Preview in Browser Markdown Preview: Export HTML in Sublime Text Markdown Preview: Copy to Clipboard Markdown Preview: Open Markdown Cheat sheet Or bind some shortcut in your user key binding, go to Preferences --> Keybindings then add to the User map: For a specific parser and target: { \"keys\" : [ \"alt+m\" ], \"command\" : \"markdown_preview\" , \"args\" : { \"target\" : \"browser\" , \"parser\" : \"markdown\" } }, To bring up the quick panel to select enabled parsers for a given target: { \"keys\" : [ \"alt+m\" ], \"command\" : \"markdown_preview_select\" , \"args\" : { \"target\" : \"browser\" } }, If you want to control which browser the preview is opened in, you can edit the browser option in the settings file: /* Sets the default opener for HTML files default - Use the system default HTML viewer other - Set a full path to any executable. ex: /Applications/Google Chrome Canary.app or /Applications/Firefox.app */ \"browser\" : \"default\" ,","title":"To preview"},{"location":"usage/#custom-templates","text":"By default, Markdown Preview uses a simple template, but you can use your own custom template with the setting html_template . If you wish to not include the default stylesheets, just remove them from the css option. /* Specify a HTML template file to render your markdown within. Available place holders in HTML template: {{ HEAD }} - would be replaced by generated stylesheets, javascripts enabled above {{ BODY }} - would be replaced by HTML converted from markdown By setting \"skip_default_stylesheet\" to true you can use the styles only in your HTML template. In most cases you should turn this setting on to have a full-featured design. Refer to 'customized-template-sample.html' as a show case. */ \"html_template\" : \"/ABS_PATH_TO_A_HTML_FILE\" ,","title":"Custom Templates"},{"location":"usage/#livereload","text":"To get live updates while editing a file after preview, you need to do the following: Enable the enable_autoreload setting in MarkdownPreview.sublime-settings . /* Enable auto-reloaded on save. Will not work if GitHub parser or GitLab parser is used without oauth key specified. */ \"enable_autoreload\" : true , Install LiveReload package from Package Control. Restart. Open the command palette and select the command LiveReload: Enable/disable plug-ins . Select Simple Reload with delay (400ms) . It is possible you can get away with Simple Reload , but some experience an issue where they are one rev behind when using Simple Reload . Edit document and enjoy live reload. You don't need to enable Simple Reload on every file as it is done globally; it can be turned on or off as needed. From now on, files should auto-reload when you open them in the browser unless you disable Simple Reload .","title":"LiveReload"},{"location":"usage/#preview-path-conversion","text":"In the generated previews, paths are converted so that images and other links work properly. By default, paths are converted to absolute paths, but you can use relative if desired as well. Image paths can also be changed to inject embedded base 64 images (only for local images). Path handling is controlled by the following two settings: /* Sets how image paths are handled. Setting is a string value: (absolute | relative | base64 | none) absolute: converts relative local paths to absolute relative: converts relative local paths to a path relative to the HTML output base64: coverts the local file to base64 and embeds it in the HTML none: does nothing */ \"image_path_conversion\" : \"absolute\" , /* Sets how file paths are handled. Setting is a string value: (absolute | relative | none) absolute: converts relative local paths to absolute relative: converts relative local paths to a path relative to the HTML output none: does nothing */ \"file_path_conversions\" : \"absolute\" ,","title":"Preview Path Conversion"},{"location":"usage/#preview-temp-location","text":"By default, previews are generated in the OSs default temp location, but you can specify your own custom temp location via the path_tempfile option: /* Sets a custom temporary folder for MarkdownPreview-generated HTML files. Useful if you're using LiveReload and don't want to use the OS default. The directory will be created if it doesn't exist. Relative paths are supported, and are checked against `os.path.isabs`, see doc: http://docs.python.org/3/library/os.path.html#os.path.isabs Examples: /tmp/custom_folder (Linux/OSX - absolute path) C:/TEMP/MYNOTES C:\\\\TEMP\\\\MYNOTES (Windows - absolute path, forward slash or escaped back slash) build (All OS - relative path, current dir) ../build (Linux/OSX - relative path, in parent dir) ..\\\\build (Windows - relative path, in parent dir) */ \"path_tempfile\" : \"/tmp/my_notes\" ,","title":"Preview Temp Location"},{"location":"usage/#enabling-other-external-markdown-parsers","text":"External parser commands and arguments should first be mapped to a name. Each binary value must be an array with the path to the binary being first, followed by flags and options as individual indexes in the array. \"markdown_binary_map\" : { \"multimarkdown\" : [ \"/usr/local/bin/multimarkdown\" , \"--some-option\" , \"some-value\" ] }, Then the name can be placed in enabled_parsers to enable use of the new parser. \"enabled_parsers\" : [ \"markdown\" , \"github\" , \"gitlab\" , \"multimarkdown\" ],","title":"Enabling Other External Markdown Parsers"},{"location":"usage/#configuring-python-markdown-extensions","text":"Python Markdown comes with a number of extensions and can also use a number of 3 rd party extensions. To configure Markdown Preview with extensions, use the markdown_extensions setting. markdown_extensions is a setting that contains an array of extensions in the format of their import path. For instance, the Toc (Table of Contents) extension is found in the Markdown Package at markdown.extensions.toc . This is according to Python Markdown documentation . All extensions must be specified this way. \"markdown_extensions\" : [ \"markdown.extensions.toc\" ] To configure an extension, make the entry a dictionary. In this example, we want to turn on Toc's permalink feature: \"markdown_extensions\" : [ { \"markdown.extensions.toc\" : { \"permalink\" : true } } ] You can configure extension options with strings, booleans, integers, floats, etc. But sometimes, an extension can take a function. Functions are not part of the JSON spec. Luckily, support has been added with the following syntax: To specify a function, create an object whose key is named !!python/name , and whose value is the import path of the function. This syntax was picked to be similar to PyYaml's syntax which is used for the Markdown frontmatter. So let's pretend we didn't like Toc's default slugify markdown.extensions.headerid.slugify , and instead wanted to use PyMdown Extensions' slugify pymdownx.slugs.uslugify . We could specify the new slugify function with the following syntax: \"markdown_extensions\" : [ { \"markdown.extensions.toc\" : { \"slugify\" : { \"!!python/name\" : \"pymdownx.slugs.uslugify\" } } } ] Compare to the PyYaml format: markdown_extensions : - markdown.extensions.toc : slugify : !!python/name:pymdownx.slugs.uslugify","title":"Configuring Python Markdown Extensions"},{"location":"usage/#to-build","text":"Just use ctrl + B (Windows/Linux) or cmd + B (Mac) to build current file. You can configure the build action by using the build_action setting. /* By default, Markdown Preview builds the HTML in the source directory. It expects the file to exist on disk. It pops up the build output panel etc. If you wish to override this behavior, you can change \"build_action\" build - The default build behavior. browser - Preview the file in your browser. clipboard - Copy the HTML output to the clipboard. sublime - Export the HTML to a Sublime tab. save - Run the normal save command that outputs to the source directory. It will also prompt for \"save as\" if the file does not exit on disk. All the build options use the default parser defined above in \"parser\" */ \"build_action\" : \"build\" , And the parser that is used when building is set in the parser setting: /* Sets the parser used for building markdown to HTML. NOTE: The parser setting is not for the preview commands now. The previews have separate commands for each parser markdown. Warning for github API: if you have a ST2 linux build, Python is not built with SSL so it may not work default - The current default parser is python-markdown parser. markdown - Use the built-in python-markdown parser github - Use the github API to convert markdown, so you can use GitHub flavored Markdown, see https://help.github.com/articles/github-flavored-markdown/ gitlab - Use the gitlab API to convert markdown, so you can use GitLab flavored Markdown, see https://docs.gitlab.com/ee/user/markdown.html */ \"parser\" : \"markdown\" , When building, a panel will be opened showing build information. This can be disabled by setting show_panel_on_build to false : /* do we show the panel when building with CMD+B */ \"show_panel_on_build\" : true ,","title":"To build"},{"location":"usage/#configuring-pygments","text":"If you add the pymdownx.highlight extension manually in the enabled extensions, you can override some of the default settings. Turn language guessing on or off ( on will highlight fenced blocks even if you don't specify a language): \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"guess_lang\" : true } ] Show line numbers: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"linenums\" : true } ] Change the highlight theme: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"pygments_style\" : \"emacs\" } ] Inline the CSS: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"noclasses\" : true } ] Use multiple: \"markdown_extensions\" : [ \"pymdownx.highlight\" : { \"linenums\" : true , \"pygments_style\" : \"emacs\" } ] The pymdownx.highlight extension's pygments_style option is only useful if you are using noclasses which writes the styles directly to the HTML tags via the style attribute. Normally, we just inject CSS generated by Pygments which is the default behavior. Whether the CSS injection occurs, the Pygments' style that is used, and the CSS class that is used for code blocks can all be controlled with the following options: /* If Pygments is being used, you may want to inject one of the Pygment styles provided into the HTML. If so, enable this. */ \"pygments_inject_css\" : true , /* Name of the Pygments style to inject. Available styles are the styles provided by pygments plus \"github\" and \"github2014\". */ \"pygments_style\" : \"github\" , /* This is the class to prepend to the pygments CSS styles. Make sure it matches whatever class(es) you've specified in the extension that controls Pygments highlighting. CodeHilite's default is \"codehilite\", while Highlight's (the extension that SuperFences uses) is \"highlight\". */ \"pygments_css_class\" : \"highlight\" , See codehilite page for more info. See highlight page for more info.","title":"Configuring Pygments"},{"location":"usage/#meta-data-support","text":"When the meta extension is enabled ( https://python-markdown.github.io/extensions/meta_data ), the results will be written to the HTML head in the form <meta name=\"key\" content=\"value1,value2\"> . title is the one exception, and its content will be written to the title tag in the HTML head.","title":"Meta Data Support"},{"location":"usage/#yaml-frontmatter-support","text":"YAML frontmatter can be stripped out and read when strip_yaml_front_matter is set to true in the settings file. In general the, the frontmatter is handled the same as meta data , but if both exist in a file, the YAML keys will override the meta extension keys. There are a few special key names that won't be handled as HTML meta data. /* Strips the YAML front matter header and converts title to a heading */ \"strip_yaml_front_matter\" : false ,","title":"YAML Frontmatter Support"},{"location":"usage/#special-yaml-key-names","text":"YAML frontmatter has a few special key names that are used that will not be handled as meta data: basepath : An absolute path to configure the relative paths for images etc. (for when the markdown is supposed to reference images in a different location.) references : Can take a file path or an array of file paths for separate markdown files containing references, footnotes, etc. Can be an absolute path or relative path. Relative paths first use the source file's directory, and if the file cannot be found, it will use the basepath setting. destination : This is an absolute file path or relative file path for when the markdown is saved to HTML via the build command or the Save to HTML command. Relative paths first use the source file's directory, and if the file cannot be found, it will use the basepath setting. settings : This is a dictionary where you can override settings that are in the settings file. --- # Builtin values references : - references.md - abbreviations.md - footnotes.md destination : destination.html # Meta Data title : Test Page author : - John Doe - Jane Doe # Settings overrides settings : markdown_extensions : - markdown.extensions.footnotes - markdown.extensions.attr_list - markdown.extensions.def_list - markdown.extensions.tables - markdown.extensions.abbr - markdown.extensions.toc - markdown.extensions.smarty - markdown.extensions.meta - markdown.extensions.wikilinks - markdown.extensions.admonition - markdown.extensions.md_in_html - pymdownx.highlight : pygments_style : github - pymdownx.progressbar - pymdownx.github - pymdownx.caret : superscript : false ---","title":"Special YAML Key Names"},{"location":"usage/#parsing-github-flavored-markdown","text":"GitHub Flavored Markdown (GFM) is a very popular markdown. Markdown Preview can actually handle them in a couple of ways: online and offline.","title":"Parsing GitHub Flavored Markdown"},{"location":"usage/#online","text":"Parsing GFM using the online method requires using the GitHub API as the parser. It may also require setting github_mode to gfm to get things like tasklists to render properly. /* Default mode for the github Markdown parser : markdown (documents) or gfm (comments) see http://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document */ \"github_mode\" : \"markdown\" , Using the GitHub API without an oauth key is limited to so many calls. After the limit is reached, the GitHub API will deny further calls until after a set limit of time. To avoid this issue, you can set your API key in the settings as follows: /* Uses an OAuth token when parsing markdown with GitHub API. To create one for Markdown Preview, see https://help.github.com/articles/creating-an-oauth-token-for-command-line-use. Warn: this secret *must not be shared* with anyone and at least you should create it with minimal scopes for security reasons. */ \"github_oauth_token\" : \"secret\" , The GitHub API only inserts IDs for headers when github_mode is markdown , but it doesn't quite generate the way that GitHub does in your project's readmes on the site. This makes it so the GitHub CSS doesn't create the clickable anchors. So when github_mode is markdown , you can have Markdown Preview insert the ids properly so the CSS works with the following option: /* Enables a post process to inject header ids to ensure hrefs to headers work */ \"github_inject_header_ids\" : true ,","title":"Online"},{"location":"usage/#offline","text":"By default almost all extensions in the default, not GitHub parser are enabled to help with a GitHub-ish feel. As mentioned earlier, a number of extensions are included by default. You can remove ones that are not part of GFM if you chose. GitHub uses CommonMark with some extras included on top. Python Markdown is not a CommonMark parser. It is certainly possible that someone could include a CommonMark parser externally call it .","title":"Offline"},{"location":"usage/#parsing-gitlab-flavored-markdown","text":"GitLab Flavored Markdown (GFM) is a popular markdown, too. Markdown Preview can handle them online.","title":"Parsing GitLab Flavored Markdown"},{"location":"usage/#online_1","text":"Parsing GFM using the online method requires using the GitLab API as the parser. It may also require setting gitlab_mode to gfm (default) to get things like tasklists to render properly. /* Default mode for the gitlab Markdown parser : markdown (documents) or gfm (comments) see https://docs.gitlab.com/ee/api/markdown.html#render-an-arbitrary-markdown-document */ \"gitlab_mode\" : \"markdown\" , You can set your personal token in the settings as follows: /* Uses a personal token when parsing markdown with GitLab API. To create one for Markdown Preview, see https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html. Warn: this secret *must not be shared* with anyone and at least you should create it with minimal scopes for security reasons. */ \"gitlab_personal_token\" : \"secret\" ,","title":"Online"},{"location":"usage/#including-css","text":"Markdown Preview includes a default CSS via the css setting. It uses the special keyword default to represent the default CSS. As seen below, CSS is configured per parser name (the same name used in enabled_parsers ). If a parser name cannot be found in the dictionary, [\"default\"] will be used. \"css\" : { \"markdown\" : [ \"default\" ], \"github\" : [ \"default\" ], \"gitlab\" : [ \"default\" ] }, You can include whatever CSS you want, and even remove the default if you like. It can take URLs or file paths. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of res://<package_name>/<subfolders>/file.css . Using the res:// format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped.","title":"Including CSS"},{"location":"usage/#override-css-by-file-type","text":"You can also override the default CSS with special file specific CSS. This CSS does not replace the default, but will append CSS for a supported file type after the conventional CSS. So assuming the following configuration: \"css\" : { \"markdown\" : [ \"default\" ], } // File must be of one type below \"markdown_filetypes\" : [ \".md\" , \".markdown\" , \".mdown\" ], We could enable the following: \"allow_css_overrides\" : true , Then if we have a file filename.md and a CSS in the same directory filename.css , that CSS will be applied to that file.","title":"Override CSS by File Type"},{"location":"usage/#including-html-head","text":"By default, the head is always included in the HTML output. This includes the CSS, JavaScript, etc. If for some reason you need to omit the HEAD, you can by modifying the include_head option. Just remove the target that you wish to omit the head in. The option build specifically refers to when build_action is set to build in the settings. /* do we include the CSS when outputting HTML? */ \"include_head\" : [ \"build\" , \"browser\" , \"sublime\" , \"clipboard\" , \"save\" ]","title":"Including HTML HEAD"},{"location":"usage/#gitlab-highlight-theme","text":"In case of using GitLab online compiler, you can set gitlab_highlight_theme to personalize syntax highlighting. Currently available options are \"white\" (default), \"dark\", \"solarized-dark\", \"solarized-light\", and, \"monokai\". Take a look at GitLab documentations here for more details.","title":"GitLab Highlight Theme"},{"location":"usage/#including-javascript","text":"Markdown Preview include default JS (if required for the given parser) via the js setting. It uses the special keyword default to represent the default JS. As seen below, JS is configured per parser name (the same name used in enabled_parsers ). If a parser name cannot be found in the dictionary, [\"default\"] will be used. \"js\" : { \"markdown\" : [ \"default\" ], \"github\" : [ \"default\" ], \"gitlab\" : [ \"default\" ] }, You can include whatever CSS you want, and even remove the default if you like. Each entry in the dictionary is a list and can take file paths or URLs. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of res://<package_name>/<subfolders>/file.js . Using the res:// format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped.","title":"Including JavaScript"},{"location":"usage/#criticmarkup","text":"Python Markdown can strip/apply out CriticMarkup syntax if desired. Simply enable the following option: /* Sets how multimarkdown critic marks are handled. Setting is a string value: (accept | reject | none) accept: Accepts the proposed inserts and deletions (comments etc. are discarded) reject: Rejects the proposed inserts and deletions (comments etc. are discarded) none: does nothing Critic marks only affects \"github\" and \"markdown\" (Python Markdown). */ \"strip_critic_marks\" : \"none\" ,","title":"CriticMarkup"},{"location":"usage/#simple-html-output","text":"Some people may desire a stripped down output on occasions that does not include HTML headers, inline styles, and IDs. Markdown Preview has a mode that will strip out these things and omit using a template. This mode can be enabled via the the html_simple option: /* Sets HTML output to a simple form: - No head - No body tags - ids, classes, and style are stripped out - Just bare minimum HTML tags and attributes - extension modifications included */ \"html_simple\" : false ,","title":"Simple HTML Output"},{"location":"about/changes/","text":"Changes 2.4.1 FIX : Remove desktop lib as we should not have been using it under our current license. FIX : Fix a typo which prevents displaying useful error message. 2.4.0 NEW : Add mermaid.js support. NEW : Remove border from default styling of markdown and github . NEW : Exit out of on_post_save even quicker if no work is needed. FIX : title in YAML frontmatter should be handled case insensitively. 2.3.0 Some breaking changes! Please read: NEW : pymdownx.superfences no longer sources any settings from markdown.extensions.codehilite and instead uses pymdownx.highlight . No need to specify markdown.extensions.codehilite in the default settings. NEW : Default pygments_css class is now set to highlight which is pymdownx.highlight 's default. If you are using pymdownx.superfences , you use use highlight , if you are using markdown.extensions.codehilite , then you may want to change this to codehilite , or change codehilite to use the highlight class as well. FIX : Use markdown.extensions.md_in_html instead of pymdownx.extrarawhtml in the default settings as the latter is no longer available in the latest dependency. 2.2.5 FIX : Fix for detecting browser in macOS Catalina. 2.2.4 FIX : Fix GitHub emoji asset links. 2.2.3 FIX : Linux browser preview issue. 2.2.2 FIX : Reload issues in some browsers. 2.2.1 Add support for Markdown 3+ and Pymdownx 6+. Add viewport scaling in HTML. 2.2.0 Add basic GitLab support. Add per parser support for JavaScript and CSS configurations. Please see documentation to learn the new format. 2.1.2 Don't allow live reload on save if using GitHub parser with no OAuth. 2.1.1 Revert autoNumber set to all in MathJax config. Revert alignment left of MathJax display equations as the default has always been center prior to 2.0 releases. 2.1.0 Add support for KaTeX math. Ensure MathJax properly looks for \\begin{env}...\\end{env} . Unified menu. 2.0.3 MathJax should only scan for arithmatex classes in HTML. 2.0.2 Code highlighting should have guessing disabled by default. Fix failure when code highlighting has guessing enabled, but the user specified a language name which has no lexer. 2.0.1 Fix missing code highlight extension. Fix build command failing. 2.0.0 Please read documentation as there have been big changes in this version which may require updates to your personal settings. Do not vendor Python Markdown. Python Markdown will be acquired via the current markdown dependency. Python Markdown configuration changes: No more defining settings as extension(option1=a,option2=b) . Options will be defined as a dictionary. You will have to define the full extension name: markdown.extensions.codehilite . This will allow you to import any extension you want outside of Markdown Preview. New line to <br> conversion has been dropped from GitHub emulation as GitHub no longer does this. Ref issue #374 . Originally a couple pymdownx-extension extensions were ported over to this plugin to give a GitHub-ish feel to Markdown, these are no longer be included directly, but are included as a dependency. This will provide the latest versions, and also provide new extensions previously not included. Ref issue #378 . Drop ST2 so we no longer have to provide specially crafted Python Markdown versions when we try to upgrade. Improve yaml front matter parsing: see issue #392 . Better UML JavaScript injection. Link contributors in readme. Remove \"magic\" Pygments configuration. User will now explicitly configure Pygments CSS injection separately. Require explicit parser name moving forward instead of default, but provide a deprecation path for the short term. Fix GitHub header ID generation. GitHub only lowercases ASCII chars. Ensure default parser is Python Markdown, and enable auto-reload by default. Hopefully better documentation. Make flake8 compatible. Fix outdated links. Remove MathJax and UML option in favor of a more generalized solution via the pre-existing css option. Remove embed_css_for_sublime_output option in favor of more generalized include_head option. 1.4.3 Fix issue where Chrome prevents live reload. 1.4.0 css setting can now be an array and contain multiple CSS files (see settings file for more info). Updated GitHub style to latest. 1.3.0 Now supports any markdown parser through a generalized method. Now you can map a binary to parser name via markdown_binary_map . Then use the parser name in enabled_parsers to use it. MultiMarkdown specific settings have been removed. MultiMarkdown should now be configured via markdown_binary_map and enabled_parsers . Upgraded to Python Markdown 2.6.4. Removed internal PyYaml and Pygments. Markdown Preview now uses Package Control dependencies to obtain PyYaml and Pygments. Update kbd CSS for GitHub. 1.0.3 The messages.json should OK for this time. 1.0.2 Fixes messages.json and changelog versions. 1.0.1 Removed markdown2 parser for its not well maintained and buggy. Make Python Markdown parser as default. Split the preview commands for Python Markdown parser and GitHub Flavored Markdown parser. Add markdown file build support, build parser are config via the origin \"parser\" settings. Add this changelog file for both developers and users. Add messages.json which make display of README.md and CHANGES.md Try use Markdown Extended.tmLanguage for cheat sheet if you installed Markdown Extended . 1.0.0 Support for ST3. Added Python Markdown parser. CSS search first in markdown file directory and the the build-in.","title":"Changes"},{"location":"about/changes/#changes","text":"","title":"Changes"},{"location":"about/changes/#241","text":"FIX : Remove desktop lib as we should not have been using it under our current license. FIX : Fix a typo which prevents displaying useful error message.","title":"2.4.1"},{"location":"about/changes/#240","text":"NEW : Add mermaid.js support. NEW : Remove border from default styling of markdown and github . NEW : Exit out of on_post_save even quicker if no work is needed. FIX : title in YAML frontmatter should be handled case insensitively.","title":"2.4.0"},{"location":"about/changes/#230","text":"Some breaking changes! Please read: NEW : pymdownx.superfences no longer sources any settings from markdown.extensions.codehilite and instead uses pymdownx.highlight . No need to specify markdown.extensions.codehilite in the default settings. NEW : Default pygments_css class is now set to highlight which is pymdownx.highlight 's default. If you are using pymdownx.superfences , you use use highlight , if you are using markdown.extensions.codehilite , then you may want to change this to codehilite , or change codehilite to use the highlight class as well. FIX : Use markdown.extensions.md_in_html instead of pymdownx.extrarawhtml in the default settings as the latter is no longer available in the latest dependency.","title":"2.3.0"},{"location":"about/changes/#225","text":"FIX : Fix for detecting browser in macOS Catalina.","title":"2.2.5"},{"location":"about/changes/#224","text":"FIX : Fix GitHub emoji asset links.","title":"2.2.4"},{"location":"about/changes/#223","text":"FIX : Linux browser preview issue.","title":"2.2.3"},{"location":"about/changes/#222","text":"FIX : Reload issues in some browsers.","title":"2.2.2"},{"location":"about/changes/#221","text":"Add support for Markdown 3+ and Pymdownx 6+. Add viewport scaling in HTML.","title":"2.2.1"},{"location":"about/changes/#220","text":"Add basic GitLab support. Add per parser support for JavaScript and CSS configurations. Please see documentation to learn the new format.","title":"2.2.0"},{"location":"about/changes/#212","text":"Don't allow live reload on save if using GitHub parser with no OAuth.","title":"2.1.2"},{"location":"about/changes/#211","text":"Revert autoNumber set to all in MathJax config. Revert alignment left of MathJax display equations as the default has always been center prior to 2.0 releases.","title":"2.1.1"},{"location":"about/changes/#210","text":"Add support for KaTeX math. Ensure MathJax properly looks for \\begin{env}...\\end{env} . Unified menu.","title":"2.1.0"},{"location":"about/changes/#203","text":"MathJax should only scan for arithmatex classes in HTML.","title":"2.0.3"},{"location":"about/changes/#202","text":"Code highlighting should have guessing disabled by default. Fix failure when code highlighting has guessing enabled, but the user specified a language name which has no lexer.","title":"2.0.2"},{"location":"about/changes/#201","text":"Fix missing code highlight extension. Fix build command failing.","title":"2.0.1"},{"location":"about/changes/#200","text":"Please read documentation as there have been big changes in this version which may require updates to your personal settings. Do not vendor Python Markdown. Python Markdown will be acquired via the current markdown dependency. Python Markdown configuration changes: No more defining settings as extension(option1=a,option2=b) . Options will be defined as a dictionary. You will have to define the full extension name: markdown.extensions.codehilite . This will allow you to import any extension you want outside of Markdown Preview. New line to <br> conversion has been dropped from GitHub emulation as GitHub no longer does this. Ref issue #374 . Originally a couple pymdownx-extension extensions were ported over to this plugin to give a GitHub-ish feel to Markdown, these are no longer be included directly, but are included as a dependency. This will provide the latest versions, and also provide new extensions previously not included. Ref issue #378 . Drop ST2 so we no longer have to provide specially crafted Python Markdown versions when we try to upgrade. Improve yaml front matter parsing: see issue #392 . Better UML JavaScript injection. Link contributors in readme. Remove \"magic\" Pygments configuration. User will now explicitly configure Pygments CSS injection separately. Require explicit parser name moving forward instead of default, but provide a deprecation path for the short term. Fix GitHub header ID generation. GitHub only lowercases ASCII chars. Ensure default parser is Python Markdown, and enable auto-reload by default. Hopefully better documentation. Make flake8 compatible. Fix outdated links. Remove MathJax and UML option in favor of a more generalized solution via the pre-existing css option. Remove embed_css_for_sublime_output option in favor of more generalized include_head option.","title":"2.0.0"},{"location":"about/changes/#143","text":"Fix issue where Chrome prevents live reload.","title":"1.4.3"},{"location":"about/changes/#140","text":"css setting can now be an array and contain multiple CSS files (see settings file for more info). Updated GitHub style to latest.","title":"1.4.0"},{"location":"about/changes/#130","text":"Now supports any markdown parser through a generalized method. Now you can map a binary to parser name via markdown_binary_map . Then use the parser name in enabled_parsers to use it. MultiMarkdown specific settings have been removed. MultiMarkdown should now be configured via markdown_binary_map and enabled_parsers . Upgraded to Python Markdown 2.6.4. Removed internal PyYaml and Pygments. Markdown Preview now uses Package Control dependencies to obtain PyYaml and Pygments. Update kbd CSS for GitHub.","title":"1.3.0"},{"location":"about/changes/#103","text":"The messages.json should OK for this time.","title":"1.0.3"},{"location":"about/changes/#102","text":"Fixes messages.json and changelog versions.","title":"1.0.2"},{"location":"about/changes/#101","text":"Removed markdown2 parser for its not well maintained and buggy. Make Python Markdown parser as default. Split the preview commands for Python Markdown parser and GitHub Flavored Markdown parser. Add markdown file build support, build parser are config via the origin \"parser\" settings. Add this changelog file for both developers and users. Add messages.json which make display of README.md and CHANGES.md Try use Markdown Extended.tmLanguage for cheat sheet if you installed Markdown Extended .","title":"1.0.1"},{"location":"about/changes/#100","text":"Support for ST3. Added Python Markdown parser. CSS search first in markdown file directory and the the build-in.","title":"1.0.0"},{"location":"about/contributing/","text":"Contributing & Support There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of! Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward. ST3+ Fully supported and actively maintained. Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Answer Questions in Issues Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out. Pull Requests Pull requests are welcome, and a great way to help fix bugs and add new features. Documentation Improvements A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of! Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward. ST3+ Fully supported and actively maintained.","title":"Contributing &amp; Support"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#answer-questions-in-issues","text":"Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.","title":"Answer Questions in Issues"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and a great way to help fix bugs and add new features.","title":"Pull Requests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.","title":"Documentation Improvements"},{"location":"about/license/","text":"License Released under the MIT license. Copyright \u00a9 2015 - 2018 Julien Bouquillon, revolunet julien@revolunet.com Copyright \u00a9 2018 - 2022 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"Released under the MIT license. Copyright \u00a9 2015 - 2018 Julien Bouquillon, revolunet julien@revolunet.com Copyright \u00a9 2018 - 2022 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}